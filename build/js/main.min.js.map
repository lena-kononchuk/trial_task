{"version":3,"sources":["app.js","validation.js","range.js"],"names":["loadHTML","id","url","fetch","then","response","ok","text","Error","status","document","getElementById","innerHTML","data","initializeFormValidation","initializeSwiper","initializeMobileMenuAndScroll","initializeSumSlider","initializeMonthsSlider","catch","console","error","menu","menuIcon","querySelector","closeMenuAndScrollToSection","event","targetSection","target","getAttribute","preventDefault","classList","remove","scrollIntoView","behavior","block","querySelectorAll","forEach","link","addEventListener","toggle","swiper","Swiper","loop","slidesPerView","spaceBetween","centeredSlides","breakpoints","640","768","1024","nextButton","prevButton","updateNavigationButtons","slides","length","add","isBeginning","isEnd","activeIndex","slideNext","slidePrev","on","copy","cloneNode","appendChild","IntlTelInputElement","HTMLElement","constructor","super","this","inputElement","createElement","type","setAttribute","intlTelInputInstance","connectedCallback","intlTelInput","autoHideDialCode","autoPlaceholder","formatOnDisplay","nationalMode","preferredCountries","initialCountry","geoIpLookup","json","countryCode","country","callback","separateDialCode","placeholderNumberType","dropdownContainer","utilsScript","setupDropdownPositioning","repositionDropdown","window","dropdown","rect","getBoundingClientRect","offsetHeight","style","top","bottom","scrollY","left","scrollX","width","position","value","checkValidity","isValidNumber","isAllowedKey","isNumber","key","includes","errorMessage","input","closest","phoneNumberElement","trim","contains","innerText","customElements","define","let","minSum","maxSum","marksSum","minMonths","maxMonths","marksMonths","sum","months","convertToPercent","num","min","max","addMarks","$slider","marks","isMonthSlider","html","i","append","$sliderSum","$","ionRangeSlider","grid","to","postfix","onStart","updateProfit","onChange","$sliderMonths","from","step","calculateProfit","amount","profit","Math","round"],"mappings":"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","file":"main.min.js","sourcesContent":["// Function to load HTML components dynamically\nfunction loadHTML(id, url) {\n    fetch(url)\n        .then((response) => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return response.text(); // Convert the response to text\n        })\n        .then((data) => {\n            // Insert the fetched HTML into the element with the specified ID\n            document.getElementById(id).innerHTML = data;\n\n            // Check if the loaded content is the form, and initialize validation if so\n            if (id === 'form') {\n                initializeFormValidation(); // Call the function to initialize form validation\n            }\n\n            // Check if the loaded content is the swiper, and initialize it if so\n            if (id === 'swiper') {\n                initializeSwiper(); // Call the function to initialize Swiper\n            }\n\n            // Check if the loaded content is the header (navigation), and initialize the mobile menu\n            if (id === 'header') {\n                initializeMobileMenuAndScroll(); // Call the function to initialize mobile menu and scroll behavior\n            }\n            if (id === 'article') {\n                initializeSumSlider();\n                initializeMonthsSlider();\n            }   \n        })\n        .catch((error) => {\n            console.error(`Error loading ${url}:`, error);\n        });\n}\n\n// Function to initialize mobile menu and smooth scroll behavior\nfunction initializeMobileMenuAndScroll() {\n    const menu = document.getElementById('mobileMenu'); // Get the mobile menu element\n    const menuIcon = document.querySelector('.menu-icon'); // Get the menu icon element\n\n    // Function to toggle the mobile menu visibility\n    function toggleMobileMenu() {\n        menu.classList.toggle('is-open');\n        menuIcon.classList.toggle('open');\n    }\n\n    // Function to close the menu and scroll to section\n    function closeMenuAndScrollToSection(event) {\n        const targetSection = document.querySelector(event.target.getAttribute('href')); // Get the target section\n\n        if (targetSection) {\n            event.preventDefault(); // Prevent default link behavior (jumping to section)\n            menu.classList.remove('is-open');\n            menuIcon.classList.remove('open');\n            targetSection.scrollIntoView({\n                behavior: 'smooth',\n                block: 'start'\n            });\n        }\n    }\n\n    // Attach event listeners to all anchor links inside the mobile menu\n    document.querySelectorAll('#mobileMenu a[href^=\"#\"]').forEach(link => {\n        link.addEventListener('click', closeMenuAndScrollToSection);\n    });\n\n    // Attach event listener to menu icon for opening/closing\n    if (menuIcon) {\n        menuIcon.addEventListener('click', toggleMobileMenu);\n    }\n}\n\n// Initialize Swiper function (already provided)\nfunction initializeSwiper() {\n    const swiper = new Swiper('.swiper__reviews', {\n        loop: false,\n        slidesPerView: 1,\n        spaceBetween: 30,\n        centeredSlides: true,\n        breakpoints: {\n            640: { slidesPerView: 1 },\n            768: { slidesPerView: 1 },\n            1024: { slidesPerView: 1 }\n        }\n    });\n\n    const nextButton = document.getElementById('nextButton');\n    const prevButton = document.getElementById('prevButton');\n\n    const updateNavigationButtons = () => {\n        if (swiper.slides.length === 0) {\n            nextButton.classList.add('disabled');\n            prevButton.classList.add('disabled');\n            return;\n        }\n        prevButton.classList.toggle('disabled', swiper.isBeginning);\n        nextButton.classList.toggle('disabled', swiper.isEnd || swiper.activeIndex === swiper.slides.length - 2);\n    };\n\n    if (nextButton && prevButton) {\n        nextButton.addEventListener('click', () => swiper.slideNext());\n        prevButton.addEventListener('click', () => swiper.slidePrev());\n        swiper.on('slideChange', updateNavigationButtons);\n        updateNavigationButtons();\n    }\n}\n// copy logo\nvar copy = document.querySelector(\".logo_items\").cloneNode(true);\n    document.querySelector(\".logos\").appendChild(copy);\n\n// Load HTML components dynamically by calling the loadHTML function for each section\nloadHTML('header', 'section/header.html');\nloadHTML('form', 'section/form.html');\nloadHTML('article', 'section/article.html');\nloadHTML('swiper', 'section/swiper.html'); // Ensure Swiper is loaded and initialized\nloadHTML('footer', 'section/footer.html');\n","class IntlTelInputElement extends HTMLElement {\n    constructor() {\n        super();\n        this.inputElement = document.createElement('input');\n        this.inputElement.type = 'tel';\n        this.inputElement.setAttribute('minlength', '5');\n        this.inputElement.classList.add('iti__tel-input');\n\n        this.appendChild(this.inputElement);\n        this.intlTelInputInstance = null; // Store intlTelInput instance\n    }\n\n    connectedCallback() {\n        // Initialize intlTelInput\n        this.intlTelInputInstance = intlTelInput(this.inputElement, {\n            autoHideDialCode: false,\n            autoPlaceholder: 'ON',\n            formatOnDisplay: true,\n            nationalMode: true,\n            preferredCountries: ['uk', 'ie', 'gb', 'in'],\n            initialCountry: \"auto\",\n            geoIpLookup: (callback) => {\n                fetch('https://ipinfo.io?token=4fbab07461a9f4')\n                    .then(response => response.json())\n                    .then(data => {\n                        const countryCode = (data && data.country) ? data.country : \"ie\";\n                        callback(countryCode);\n                    })\n                    .catch(() => {\n                        callback(\"ie\"); // Default to Ireland if lookup fails\n                    });\n            },\n            separateDialCode: true,\n            placeholderNumberType: 'MOBILE',\n            dropdownContainer: document.querySelector('.dropdown'), // Use the specific span container\n            utilsScript: 'https://cdn.jsdelivr.net/npm/intl-tel-input@24.5.0/build/js/utils.js',\n        });\n\n        // Ensure dropdown is repositioned correctly when opened\n        this.setupDropdownPositioning();\n    }\n\n    setupDropdownPositioning() {\n        // Listen for dropdown open event\n        this.inputElement.addEventListener('open:dropdown', () => {\n            this.repositionDropdown();\n        });\n\n        // Reposition dropdown on resize or scroll\n        window.addEventListener('resize', () => this.repositionDropdown());\n        window.addEventListener('scroll', () => this.repositionDropdown());\n    }\n\nrepositionDropdown() {\n    const dropdown = document.querySelector('.iti__dropdown');\n    const dropdownContainer = document.querySelector('.dropdown'); \n    if (!dropdown || !dropdownContainer) return;\n\n    const rect = dropdownContainer.getBoundingClientRect(); \n    const dropdownHeight = dropdown.offsetHeight;\n\n    dropdown.style.top = `${rect.bottom + window.scrollY}px`;\n    dropdown.style.left = `${rect.left + window.scrollX}px`;\n    dropdown.style.width = `${rect.width}px`; \n    dropdown.style.position = 'absolute'; \n}\n\n    get value() {\n        return this.inputElement.value;\n    }\n\n    checkValidity() {\n        const isValidNumber = this.intlTelInputInstance.isValidNumber();\n\n        if (isValidNumber) {\n            this.inputElement.classList.remove('invalid');\n            this.inputElement.classList.add('valid');\n        } else {\n            this.inputElement.classList.add('invalid');\n            this.inputElement.classList.remove('valid');\n        }\n    }\n\n    isAllowedKey(event) {\n        const allowedKeys = ['Backspace', 'Tab', 'ArrowLeft', 'ArrowRight', 'Delete']; // Allowed keys\n        const isNumber = (event.key >= '0' && event.key <= '9'); // Check if pressed key is a digit\n        return allowedKeys.includes(event.key) || isNumber; // Return true if key is allowed\n    }\n}\n\n// Define custom element\ncustomElements.define('intl-tel-input', IntlTelInputElement);\n\n// Function to initialize form validation\nfunction initializeFormValidation() {\n    const errorMessage = document.getElementById(\"error-message\");\n    \n    // Initially hide error message (opacity = 0)\n    errorMessage.classList.remove('visible');\n\n    document.querySelectorAll('input').forEach(input => {\n        input.classList.remove('valid', 'invalid');\n        input.closest('.form__group').classList.add('empty');\n\n        input.addEventListener('focus', () => {\n            input.closest('.form__group').classList.remove('empty');\n            errorMessage.classList.remove('visible'); // Hide error message on focus\n        });\n\n        input.addEventListener('input', () => {\n            if (input.value.trim() !== '') {\n                input.closest('.form__group').classList.remove('empty');\n\n                // Validate phone number through intl-tel-input\n                if (input.classList.contains('iti__tel-input')) {\n                    const phoneNumberElement = input;\n                    const isValidPhone = phoneNumberElement.checkValidity();\n\n                    if (isValidPhone) {\n                        phoneNumberElement.classList.remove('invalid');\n                        phoneNumberElement.classList.add('valid');\n                        errorMessage.classList.remove('visible'); // Hide error message\n                    } else {\n                        phoneNumberElement.classList.remove('valid');\n                        phoneNumberElement.classList.add('invalid');\n                        errorMessage.innerText = \"Please fill out all fields correctly.\";\n                        errorMessage.classList.add('visible'); // Show error message\n                    }\n                } else {\n                    // Validate other fields (e.g., name and email)\n                    if (input.checkValidity()) {\n                        input.classList.remove('invalid');\n                        input.classList.add('valid');\n                        errorMessage.classList.remove('visible'); // Hide error message\n                    } else {\n                        input.classList.remove('valid');\n                        input.classList.add('invalid');\n                        errorMessage.innerText = \"Please fill out all fields correctly.\";\n                        errorMessage.classList.add('visible'); // Show error message\n                    }\n                }\n            } else {\n                input.closest('.form__group').classList.add('empty');\n                input.classList.remove('valid', 'invalid');\n                errorMessage.classList.remove('visible'); // Hide error message\n            }\n        });\n    });\n}\n","// Variables for the amount slider\nlet minSum = 300; // Minimum amount\nlet maxSum = 15000; // Maximum amount\nlet marksSum = [3975, 7650, 11325, 15000]; // Mark points for the amount\n\n// Variables for the month slider\nlet minMonths = 1; // Minimum number of months\nlet maxMonths = 12; // Maximum number of months\nlet marksMonths = [1, 3, 6, 9, 12]; // Mark points for the number of months\n\nlet sum = 2000; // Initial amount value set to 2000 to match the slider\nlet months = minMonths; // Initial number of months\n\n// Function to convert values to percentage\nfunction convertToPercent(num, min, max) {\n    return (num - min) / (max - min) * 100;\n}\n\n// Function to add marks (labels) to the slider\nfunction addMarks($slider, marks, min, max, isMonthSlider = false) {\n    let html = '';\n    let left = 0;\n\n    for (let i = 0; i < marks.length; i++) {\n        left = convertToPercent(marks[i], min, max); // Calculate the left position in percentage\n        // Append \"€\" for amount or \"months\" for months\n        html += '<span class=\"mark\" style=\"left: ' + left + '%\">' + marks[i] + (isMonthSlider ? ' months' : ' €') + '</span>';\n    }\n\n    $slider.append(html); // Append the marks to the slider container\n}\n\n// Function to initialize the amount slider\nfunction initializeSumSlider() {\n    const $sliderSum = $(\"#range-sum\"); // ID of the amount slider\n\n    $sliderSum.ionRangeSlider({\n        type: \"double\",\n        grid: true,\n        min: minSum,\n        max: maxSum,\n        // from: minSum, // Left slider initial value\n       to: 2000,   // Right slider initial value\n        postfix: ' €',\n        onStart: function (data) {\n            sum = data.to; // Use 'data.to' for the right slider's initial value\n            addMarks($sliderSum, marksSum, minSum, maxSum); // Updated to add marks\n            updateProfit(); // Update profit on start\n        },\n        onChange: function (data) {\n            sum = data.to; // Use 'data.to' to control the right slider value\n            updateProfit(); // Update profit on change\n        }\n    });\n}\n\n// Function to initialize the months slider\nfunction initializeMonthsSlider() {\n    const $sliderMonths = $(\"#range-months\"); // ID of the months slider\n\n    $sliderMonths.ionRangeSlider({\n        type: \"single\", // Changed to \"single\" for a single month value\n        grid: true,\n        min: minMonths,\n        max: maxMonths,\n        from: minMonths,\n       step: 1,\n        postfix: ' month',\n        onStart: function (data) {\n            months = data.from; // Update 'months' to reflect the slider's initial value\n            addMarks($sliderMonths, marksMonths, minMonths, maxMonths, true); // Add marks for months, passing `true`\n            updateProfit(); // Update profit on start\n        },\n        onChange: function (data) {\n            months = data.from; // Update the months variable\n            updateProfit(); // Update profit on change\n        }\n    });\n}\n\n// Function to calculate potential profit\nfunction calculateProfit(amount, months) {\n    let profitRate = 4.3; // Profit rate (4.3 for €2000 to yield €8600)\n    return amount * profitRate * months; // Profit for the specified months\n}\n\n// Function to update the displayed profit\nfunction updateProfit() {\n    const profit = Math.round(calculateProfit(sum, months)); // Округление до целого числа\n    $('.profit-text').text('MOGUĆA DOBIT:'); // Обновляем текст\n    $('.profit-amount').text(`€ ${profit}`); // Обновляем сумму с € символом\n}\n// Main function\n$(function () {\n    // Initialize sliders when the page loads\n    initializeSumSlider();\n    initializeMonthsSlider();\n});\n"]}